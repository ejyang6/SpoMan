<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd">
	<!-- 네임스페이스 context,mybatis-spring 추가하였음. -->
	<!-- [1] DataSource 빈을 등록
			(1) DriverManagerDataSource 빈을 등록
			(2) server.xml에 설정되어 있는 DBCP를 JNDI로 찾아쓰도록 등록하는 방법(현재 학원에는 이게 되어 있음)
				1,2번중 하나 선택해서 진행 하면 됨
			(3) HikariCP커넥션 풀을 이용하는 방법[교재 176p]
			-->
			<!-- (1) DriverManagerDataSource -->
			<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<!-- setter주어야 되는데 이건 property로 줄수 있어 -->
				<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
				<property name="username" value="scott"/>
				<property name="password" value="tiger"/>
			</bean>
			<!-- (2) JNDI로 룩업하여 사용하는 방법 :Tomcat서버에 등록된 DataSource를 이름으로 찾아
					  빈으로 등록하는 방법-->
			
			<bean id="jndiDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"><!-- id값이 레퍼런스 소스값이라고 함 -->
				<property name="jndiName" value="java:comp/env/jdbc/myshop"></property>
				<!-- java:comp/env/가 tomcat을 나타내는 것 -->
				
			</bean>
			<!-- (3) HikariCP 커넥션 풀을 이용하는 방법 -->
			<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
				<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"/>
				<property name="username" value="spoman"/>
				<property name="password" value="spo"/>
			</bean>
			
			<bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource"
			destroy-method="close">
				<constructor-arg ref="hikariConfig"/>
			</bean>
			
			<!-- [2] SqlSessionFactoryBean 등록 -->
			<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
				<!-- org.mybatis.spring.SqlSessionFactoryBean 요객체의 set dataSource를 해줄거라는 -->
				<property name="dataSource" ref="hikariDataSource"/><!-- 바로위 빈의 id를 가져온것 -->
				<property name="configLocation" value="classpath:spring/config/mybatis-config.xml"/>
			</bean>
			
			<!-- [3] SqlSessionTemplate빈 등록     <=    sqlsession을 만들어주는 템플릿 객체-->
			<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"><!-- 오류나면 기본생성자가 없다는 말이야 -> constructor-arg로 생성자 설정 해주어야함-->
				<constructor-arg index="0" ref="sqlSessionFactory"/>
			</bean>
			
			<!-- [4] mybatis-spring:scan 설정 -->
			<mybatis-spring:scan base-package="spo.tis.mapper"/>
			<!-- mybatis-spring:scan에 패키지를 등록하면 해당 해키지에 있는 인터페이스를 구현한 구현객체(Prox객체<=대리객체)
			를 스프링이 자동으로 만들어 준다. 단 이때 XXXMapper.xml 파일에 기술된 namespace는
			해당인터페이스의 패키지명.인터페이스명으로 기술해야 하며, 각 엘리먼트의 id는 인터페이스의 메소드명과 
			일치 해야한다.-->
</beans>
